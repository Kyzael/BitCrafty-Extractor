[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bitcrafty-extractor"
version = "2.0.0"
description = "AI-powered real-time data extraction tool for BitCraft game with console interface and global hotkeys"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "BitCrafty Team"},
]
keywords = ["bitcraft", "data-extraction", "computer-vision", "ai-vision", "gaming", "console-app", "global-hotkeys", "rich-terminal"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Image Processing",
]

dependencies = [
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "rich>=13.0.0",
    "pywin32>=306",
    "pynput>=1.7.6",
    "psutil>=5.9.0",
    "PyYAML>=6.0",
    "structlog>=23.0.0",
    "aiohttp>=3.8.0",
    "requests>=2.31.0",
    "pandas>=2.0.0",
    "deepdiff>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
]

[project.scripts]
bitcrafty-extractor = "bitcrafty_extractor:main"

[project.urls]
Homepage = "https://github.com/Kyzael/BitCrafty-Extractor"
Repository = "https://github.com/Kyzael/BitCrafty-Extractor"
Issues = "https://github.com/Kyzael/BitCrafty-Extractor/issues"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bitcrafty_extractor"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "win32gui.*",
    "win32ui.*", 
    "win32con.*",
    "win32process.*",
    "psutil.*",
    "pynput.*",
    "rich.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --ignore=test/ai_analysis/test_provider_comparison.py"
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "vision: marks tests that require computer vision libraries",
    "focus: marks tests that require BitCraft window focus",
    "ai_analysis: marks tests as AI analysis tests",
    "asyncio: marks tests as async tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
