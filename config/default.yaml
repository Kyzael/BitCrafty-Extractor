# BitCrafty Extractor Configuration

# AI Provider Settings
ai:
  # Primary AI provider: "anthropic_claude" (most accurate for quantities)
  default_provider: "anthropic_claude"
  
  # Fallback provider if primary fails: "openai_gpt4v" (GPT-4-Turbo)
  fallback_provider: "openai_gpt4v"
  
  # OpenAI Configuration
  openai:
    api_key: ""  # Set your OpenAI API key here
    model: "gpt-4-turbo"  # Updated to GPT-4-Turbo for better accuracy
    timeout: 30.0
    
  # Anthropic Configuration  
  anthropic:
    api_key: ""  # Set your Anthropic API key here
    model: "claude-3-5-sonnet-20241022"  # Updated to latest Claude 3.5 Sonnet
    timeout: 30.0

# Screenshot Capture Settings
capture:
  # Image format: "PNG" or "JPEG"
  format: "PNG"
  
  # JPEG quality (1-100, only used if format is JPEG)
  quality: 95
  
  # Automatic window detection
  auto_detect_game_window: true
  
  # Target process name - specifically bitcraft.exe
  target_process: "bitcraft.exe"
  
  # Window title patterns to look for (case-insensitive)
  game_window_patterns:
    - "BitCraft"
    - "bitcraft"
    - "BITCRAFT"
    - "Bitcraft"
  
  # Minimum window size to consider (filters out small UI windows)
  min_window_width: 400
  min_window_height: 300

# Hotkey Configuration
hotkeys:
  # Queue screenshot hotkey
  queue_screenshot: "ctrl+shift+e"
  
  # Analyze queue hotkey  
  analyze_queue: "ctrl+shift+x"
  
  # Quit application hotkey
  quit_application: "ctrl+shift+q"
  
  # Enable/disable hotkeys globally
  enabled: true

# Queue Settings
queue:
  # Maximum number of screenshots in queue
  max_size: 10
  
  # Auto-clear queue after successful analysis
  auto_clear: true

# Application Settings
app:
  # Enable debug logging
  debug: false
  
  # Log file path (relative to application directory)
  log_file: "bitcrafty-extractor.log"
  
  # Window size and position
  window:
    width: 1200
    height: 800
    remember_position: true

# Data Export Settings
export:
  # Default export directory
  output_directory: "exports"
  
  # Export formats to generate
  formats:
    - "json"
    - "csv"
  
  # Include metadata in exports
  include_metadata: true
